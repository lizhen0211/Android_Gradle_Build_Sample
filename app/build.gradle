apply plugin: 'com.android.application'

def applicationVersionName = '2.2.2'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"
    signingConfigs {
        debug {
        }
        release {
        }
    }
    defaultConfig {
        applicationId "com.example.administrator.android_buide_sample"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName applicationVersionName
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.ra'
            versionNameSuffix '.rv'
        }
        debug {
            applicationIdSuffix '.da'
            versionNameSuffix '.dv'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def apkPrefix = "pre";
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                File outputDirectory = new File(outputFile.parent);
                def fileName
                if (variant.buildType.name == "release") {
                    // 输出apk名称为pre_versionname_channalname.apk
                    fileName = apkPrefix + "_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                } else {
                    fileName = apkPrefix + "_${defaultConfig.versionName}_debug.apk"
                }
                output.outputFile = new File(outputDirectory, fileName)
            }
        }
    }

    productFlavors {
        qh360 {
            applicationId "com.example.administrator.android_buide_sample.qh360"
        }
        baidu {
            applicationId "com.example.administrator.android_buide_sample.baidu"
        }
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [CHANNEL_NAME: name]
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
}

//dependencies {
//    // The 'compile' configuration tells Gradle to add the dependency to the
//    // compilation classpath and include it in the final package.
//
//    // Dependency on the "mylibrary" module from this project
//    compile project(":mylibrary")
//
//    // Remote binary dependency
//    compile 'com.android.support:appcompat-v7:23.4.0'
//
//    // Local binary dependency
//    compile fileTree(dir: 'libs', include: ['*.jar'])
//}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}


